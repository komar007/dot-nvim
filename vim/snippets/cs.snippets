snippet prop
	private ${1:int} _${2:prop} = ${3:def};
	public $1 ${4:$2} {
		get { return _$2; }
		set { _$2 = value; RaisePropertyChanged(() => $4); }
	}
	${5}
snippet cmd
	private MvxCommand _${1:command};
	public System.Windows.Input.ICommand ${2:$1} {
		get {
			_$1 = _$1 ?? new MvxCommand(${3:Do$2});
			return _$1;
		}
	}
	private void $3()
	{
		${4}
	}
# if condition
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet ifs
	if (${1})
		${2}
# do while loop
snippet do
	do {
		${2}
	} while (${1});
# while loop
snippet wh
	while (${1}) {
		${2}
	}
# for loop
snippet for
	for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
		${4}
	}
# foreach
snippet fore
	foreach (var ${1:entry} in ${2}) {
		${3}
	}
snippet foreach
	foreach (var ${1:entry} in ${2}) {
		${3}
	}
# interfaces
snippet interface
	public interface ${1:`Filename()`} {
		${2}
	}
snippet if+
	public interface ${1:`Filename()`} {
		${2}
	}
# class bodies
snippet class
	public class ${1:`Filename()`} {
		${2}
	}
snippet cls
	${2:public} class ${1:`Filename()`} {
		${3}
	}
snippet cls+
	public class ${1:`Filename()`} {
		${2}
	}
snippet cls+^
	public static class ${1:`Filename()`} {
		${2}
	}
snippet cls&
	internal class ${1:`Filename()`} {
		${2}
	}
snippet cls&^
	internal static class ${1:`Filename()`} {
		${2}
	}
snippet cls|
	protected class ${1:`Filename()`} {
		${2}
	}
snippet cls|%
	protected abstract class ${1:`Filename()`} {
		${2}
	}
# constructor
snippet ctor
	public ${1:`Filename()`}(${2})
	{
		${3}
	}
# properties - auto properties by default.
# default type is int with layout get / set.
snippet p
	${1:public} ${2:int} ${3:} { get; set; }${4}
snippet p+
	public ${1:int} ${2:} { get; set; }${3}
snippet p+&
	public ${1:int} ${2:} { get; internal set; }${3}
snippet p+|
	public ${1:int} ${2:} { get; protected set; }${3}
snippet p+-
	public ${1:int} ${2:} { get; private set; }${3}
snippet p&
	internal ${1:int} ${2:} { get; set; }${3}
snippet p&|
	internal ${1:int} ${2:} { get; protected set; }${3}
snippet p&-
	internal ${1:int} ${2:} { get; private set; }${3}
snippet p|
	protected ${1:int} ${2:} { get; set; }${3}
snippet p|-
	protected ${1:int} ${2:} { get; private set; }${3}
snippet p-
	private ${1:int} ${2:} { get; set; }${3}
# property - bool
snippet pi
	${1:public} int ${2:} { get; set; }${3}
snippet pi+
	public int ${1} { get; set; }${2}
snippet pi+&
	public int ${1} { get; internal set; }${2}
snippet pi+|
	public int ${1} { get; protected set; }${2}
snippet pi+-
	public int ${1} { get; private set; }${2}
snippet pi&
	internal int ${1} { get; set; }${2}
snippet pi&|
	internal int ${1} { get; protected set; }${2}
snippet pi&-
	internal int ${1} { get; private set; }${2}
snippet pi|
	protected int ${1} { get; set; }${2}
snippet pi|-
	protected int ${1} { get; private set; }${2}
snippet pi-
	private int ${1} { get; set; }${2}
# property - bool
snippet pb
	${1:public} bool ${2:} { get; set; }${3}
snippet pb+
	public bool ${1} { get; set; }${2}
snippet pb+&
	public bool ${1} { get; internal set; }${2}
snippet pb+|
	public bool ${1} { get; protected set; }${2}
snippet pb+-
	public bool ${1} { get; private set; }${2}
snippet pb&
	internal bool ${1} { get; set; }${2}
snippet pb&|
	internal bool ${1} { get; protected set; }${2}
snippet pb&-
	internal bool ${1} { get; private set; }${2}
snippet pb|
	protected bool ${1} { get; set; }${2}
snippet pb|-
	protected bool ${1} { get; private set; }${2}
snippet pb-
	private bool ${1} { get; set; }${2}
# property - string
snippet ps
	${1:public} string ${2:} { get; set; }${3}
snippet ps+
	public string ${1} { get; set; }${2}
snippet ps+&
	public string ${1} { get; internal set; }${2}
snippet ps+|
	public string ${1} { get; protected set; }${2}
snippet ps+-
	public string ${1} { get; private set; }${2}
snippet ps&
	internal string ${1} { get; set; }${2}
snippet ps&|
	internal string ${1} { get; protected set; }${2}
snippet ps&-
	internal string ${1} { get; private set; }${2}
snippet ps|
	protected string ${1} { get; set; }${2}
snippet ps|-
	protected string ${1} { get; private set; }${2}
snippet ps-
	private string ${1} { get; set; }${2}
# members - void
snippet m
	${1:public} ${2:void} ${3:}(${4:}) {
		${5:}
	}
snippet m+
	public ${1:void} ${2:}(${3:}) {
		${4:}
	}
snippet m&
	internal ${1:void} ${2:}(${3:}) {
		${4:}
	}
snippet m|
	protected ${1:void} ${2:}(${3:}) {
		${4:}
	}
snippet m-
	private ${1:void} ${2:}(${3:}) {
		${4:}
	}
# members - int
snippet mi
	${1:public} int ${2:}(${3:}) {
		${4:return 0;}
	}
snippet mi+
	public int ${1:}(${2:}) {
		${3:return 0;}
	}
snippet mi&
	internal int ${1:}(${2:}) {
		${3:return 0;}
	}
snippet mi|
	protected int ${1:}(${2:}) {
		${3:return 0;}
	}
snippet mi-
	private int ${1:}(${2:}) {
		${3:return 0;}
	}
# members - bool
snippet mb
	${1:public} bool ${2:}(${3:}) {
		${4:return false;}
	}
snippet mb+
	public bool ${1:}(${2:}) {
		${3:return false;}
	}
snippet mb&
	internal bool ${1:}(${2:}) {
		${3:return false;}
	}
snippet mb|
	protected bool ${1:}(${2:}) {
		${3:return false;}
	}
snippet mb-
	private bool ${1:}(${2:}) {
		${3:return false;}
	}
# members - string
snippet ms
	${1:public} string ${2:}(${3:}) {
		${4:return "";}
	}
snippet ms+
	public string ${1:}(${2:}) {
		${3:return "";}
	}
snippet ms&
	internal string ${1:}(${2:}) {
		${3:return "";}
	}
snippet ms|
	protected string ${1:}(${2:}) {
		${3:return "";}
	}
snippet ms-
	private string ${1:}(${2:}) {
		${3:return "";}
	}
# structure
snippet struct
	public struct ${1:`Filename()`} {
		${2}
	}
# enumeration
snippet enum
	public enum ${1} {
		${2}
	}
# preprocessor directives
snippet #if
	#if
		${1}
	#endif
# inline xml documentation
snippet ///
	/// <summary>
	/// ${1}
	/// </summary>
snippet <p
	<param name="${1}">${2:$1}</param>${3}
snippet <ex
	<exception cref="${1:System.Exception}">${2}</exception>${3}
snippet <r
	<returns>${1}</returns>{${2}
snippet <s
	<see cref="${1}"/>${2}
snippet <rem
	<remarks>${1}</remarks>${2}
snippet <c
	<code>${1}</code>${2}
